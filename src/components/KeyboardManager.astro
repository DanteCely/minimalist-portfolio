---
type Command = {
	title: string;
	hotkey: string;
	section: string;
	id: string;
	icon: string;
};

interface Props {
	text: string;
	commands: Command[];
}

const { text, commands } = Astro.props;

const [left, right] = text.split('{command}');
---

<astro-keyboard data-commands={JSON.stringify(commands)}>
	<footer class="no-print">
		{left}<kbd>Ctrl</kbd> + <kbd>K</kbd>{right}
	</footer>
	<ninja-keys> </ninja-keys>
</astro-keyboard>

<script>
	import 'ninja-keys';
	import { getKeyCommand } from '@utils/detect-os';
	import * as stringIcons from '../icons/string-icons';

	class AstroKeyBoard extends HTMLElement {
		constructor() {
			super();

			const commands = JSON.parse(this.dataset.commands);
			const ninja = document.querySelector('ninja-keys');

			if (ninja) {
				const keyCommand = getKeyCommand();
				const firstKeyEl = document.querySelector('kbd');

				const handlers = {
					print: () => window.print(),
					redirect: function () {
						window.open(this.link, this.target || '_self');
					},
				};

				firstKeyEl.textContent = keyCommand;

				ninja.data = commands.map((command) => {
					const { icon, hotkey, handler } = command;
					return {
						...command,
						icon: stringIcons[icon],
						hotkey: hotkey.replace('{keyCommand}', keyCommand),
						handler: handlers[handler],
					};
				});
			}
		}
	}

	customElements.define('astro-keyboard', AstroKeyBoard);
</script>
<style lang="scss">
	@use '@scss/index' as *;

	@keyframes fadeIn {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	footer {
		background-color: $seasalt;
		border-top: solid 1px $french-gray;
		bottom: 0;
		font-size: 0.85rem;
		font-weight: 500;
		padding-block: 0.5rem;
		position: fixed;
		text-align: center;
		width: 100%;

		view-timeline: --revealing block;
		animation-timeline: --revealing;

		animation: linear 0.3s fadeIn;
		animation-range: entry 100% cover 10%;
		animation-timeline: --revealing;
	}

	kbd {
		@include badge($antiflash-white);
	}
</style>
